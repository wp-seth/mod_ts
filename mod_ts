#!/usr/bin/perl
# author:  seth
# description: changes timestamps of directories to news contained files.
#
# tab-size: 2

use strict;
use warnings;
use Carp;                     # better output on errors for debugging purposes
use Cwd;
use Getopt::Long qw(:config bundling);
use Pod::Usage;
use POSIX qw/strftime/;       # format timestamp

$main::VERSION = '0.1.0';

# functions
# =========
# sub _die
# 	die handler, from Carp::Always
#
# sub _warn
# 	warn handler, from Carp::Always
#
# sub syntaxCheck
# 	check input of user (cli parser)
#
# class ModifyTimestamp
# 	sub new
# 		constructor, inits member variables
#
# 	sub get_timestamp_of_file
# 		get date of last modification of a file/directory
#
# 	sub get_time_iso
# 		given unix timestamp, this returns a human-readable iso format date
#
# 	sub get_time_iso_
# 		given unix timestamp, this returns a human-readable iso format date
#
# 	sub msg
# 		comfortable stdout printer
#
# 	sub walk_dir_change_timestamps
# 		walk through directories and touch them if wanted

# Carp::Always
sub _die {
	die @_ if ref($_[0]);
	if($_[-1] =~ /\n$/s){ # $_ is a read-only value
		my $arg = pop @_;
		$arg =~ s/.*\K at .*? line .*?\n$//s;
		push @_, $arg;
	}
	unshift @_, strftime("%Y-%m-%d %H:%M:%S ", gmtime());
	die &Carp::longmess;
}

sub _warn {
	if($_[-1] =~ /\n$/s){ # $_ is a read-only value
		my $arg = pop @_;
		$arg =~ s/.*\K at .*? line .*?\n$//s;
		push @_, $arg;
	}
	unshift @_, strftime("%Y-%m-%d %H:%M:%S ", gmtime());
	warn &Carp::longmess;
}

$SIG{__DIE__} = \&_die;
$SIG{__WARN__} = \&_warn;

sub syntaxCheck{
	my %params = ( # default cli params
		'max-depth'      => undef, # depth of recursiveness
		'recursive'      => 0, # recursively
		'use-dirs-only'  => 0, # use directories only
		'use-files-only' => 0, # use files only
		'test'           => 0, # show result only (without renaming)
		'verbose'        => 1, # trace; grade of verbosity
		'version'        => 0, # diplay version and exit
	);
	GetOptions(\%params,
		"max-depth|m=i",
		"recursive|r=i",
		"use-dirs-only|d",
		"use-files-only|f",
		"test|t",
		"silent|quiet|q" => sub { $params{'verbose'} = 0;},
		"very-verbose" => sub { $params{'verbose'} = 2;},
		"verbose|v:+",
		# auto_version will not auto make use of 'V'
		"version|V" => sub { Getopt::Long::VersionMessage();}, 
		# auto_help will not auto make use of 'h'
		"help|?|h" => sub { Getopt::Long::HelpMessage(-verbose=>99, -sections=>"NAME|SYNOPSIS");}, 
		"man" => sub { pod2usage(-exitval=>0, -verbose=>2);},
		#"examples" => sub { Getopt::Long::HelpMessage(-verbose=>99, -sections=>"EXAMPLES");},
	) or pod2usage(-exitval=>2);
	$params{'verbose'} = 1 unless exists $params{'verbose'};
	# check for unvalid combinations
	if($params{'use-files-only'} and $params{'use-dirs-only'}){
		print " error: it does not make sense to use both params --use-dirs-only and --use-files-only. see help: mod_ts --help\n";
		exit 1;
	}
	# additional params
	my @additional_params = (1,1); # number of additional params (min, max);
	if(@ARGV<$additional_params[0] or ($additional_params[1]!=-1 and @ARGV>$additional_params[1])){
		if($additional_params[0]==$additional_params[1]){
			print "number of arguments must be exactly $additional_params[0], but is ".(0+@ARGV).".\n";
		}else{
			print "number of arguments must be at least $additional_params[0] and at most ".($additional_params[1] == -1 ? 'inf' : $additional_params[1]).", but is ".(0+@ARGV).".\n";
		}
		pod2usage(-exitval=>2);
	}
	$params{'start_dir'} = $ARGV[0];
	return \%params;
}

{
	package ModifyTimestamp;
	use Cwd;
	use Data::Dumper;
	use File::Touch;
	use POSIX qw/strftime/;       # format timestamp

	sub new{
		my $class  = shift;
		my $params = shift;
		my $self = bless {
			'max_depth'  => $params->{'max-depth'},
			'dirs_only'  => $params->{'use-dirs-only'},
			'files_only' => $params->{'use-files-only'},
			'recursive'  => $params->{'recursive'},
			'start_dir'  => $params->{'start_dir'},
			'test'       => $params->{'test'},
			'verbosity'  => $params->{'verbose'},
		}, $class;
		$self->{'start_dir'} = Cwd::abs_path($self->{'start_dir'});
		return $self;
	}

	sub get_timestamp_of_file{
		my $self = shift;
		my $file = shift;
		my $type = shift; # 'mod', 'acc', 'chg'
		unless(defined $file){
			$self->msg(0, "sorry, undefined file.", 'error');
			die;
		}
		unless(-e $file){
			$self->msg(0, "sorry, file '$file' doesn't seem to exist.", 'error');
			die;
		}
		my $timestamp = 
			$type eq 'acc' ? (stat $file)[8] :
			$type eq 'mod' ? (stat $file)[9] :
			$type eq 'chg' ? (stat $file)[10] :
			$type eq 'crt' ? -1 : -1;
		$self->msg(4, "timetamp of type '$type' for file '$file' is '$timestamp'.");
		if($timestamp == -1){
			$self->msg(0, "sorry, could not fetch timetamp of type '$type' for file '$file'.", 'error');
			die;
		}
		return $timestamp;
	}

	sub get_time_iso{
		my $self = shift;
		my $unixtimestamp = shift // time();
		return strftime("%Y-%m-%d%H:%M:%S", gmtime($unixtimestamp));
	}

	sub get_time_iso_{
		my $self = shift;
		my $unixtimestamp = shift // time();
		return strftime("%Y-%m-%d %H:%M:%S", gmtime($unixtimestamp));
	}

	sub msg{
		my $self           = shift;
		my $verb_threshold = shift;
		my $msg            = shift;
		my $type           = shift;
		my $caller_inc     = shift // 0;
		return 0 if $self->{'verbosity'} < $verb_threshold;
		$type = (defined $type ? "$type in ": '');
		my $timestamp = $self->get_time_iso_;
		# my ($package, $filename, $line, $subr, $has_args, $wantarray, $evaltext, 
		# $is_require, $hints, $bitmask, $hinthash) = caller(0);
		my @callers = caller(0 + $caller_inc);
		my $line = $callers[2];
		@callers = caller(1 + $caller_inc);
		my $subr = $callers[3] // '[no sub]';
		print "$timestamp $type$subr:$line: " if $self->{'verbosity'} > 2;
		print "$msg\n";
		return 1;
	}

	sub walk_dir_change_timestamps{
		my $self = shift;
		my $working_dir = shift // $self->{'start_dir'};
		my $depth = shift // 0;
		return 0 if defined $self->{'max_depth'} and $depth > $self->{'max_depth'};
		my $entry_filename;
		my $newest_ts;
		my $newest_file;
		my $indent = ' ' x (($depth + 1) * 2);
		$self->msg(1, $indent . "$working_dir/");
		$indent .= '  ';
		opendir(my $DIR, $working_dir) or die $working_dir . ": $!"; 
		while($entry_filename = readdir $DIR){ # loop over directory entries
			next if $entry_filename eq '.' or $entry_filename eq '..';
			my $ts;
			my $entry = $working_dir . '/' . $entry_filename;
			if(-d $entry){
				if($self->{'recursive'} >= 1){ # first search subdirectories
					$ts = $self->walk_dir_change_timestamps($entry, $depth + 1);
				}
				next if $self->{'files_only'};
			}else{
				next if $self->{'dirs_only'};
			}
			$ts = $self->get_timestamp_of_file($entry, 'mod') unless defined $ts;
			if(-d $entry){
				$self->msg(2, $indent . "ts: " . $self->get_time_iso_($ts));
			}else{
				$self->msg(3, $indent . "ts: " . $self->get_time_iso_($ts) . ", entry = '$entry'");
			}
			if(not defined $newest_ts or $ts > $newest_ts){
				$newest_ts = $ts;
				$newest_file = $entry;
			}
		}
		if(defined $newest_ts){
			$self->msg(3, $indent . "newest file = '$newest_file'");
			$self->msg(2, $indent . "newest timestamp = " . $self->get_time_iso_($newest_ts));
			closedir $DIR;
			my $present_ts = $self->get_timestamp_of_file($working_dir, 'mod');
			if($self->{'recursive'} == 2 or $depth == 0){
				$self->msg(1, $indent . $self->get_time_iso_($present_ts) . ' -> ' . 
					$self->get_time_iso_($newest_ts));
				if(!$self->{'test'}){ # after searching subdirectories begin renaming
					my $touch = File::Touch->new('mtime_only' => 1, 'time' => $newest_ts);
					$touch->touch($working_dir);
				}
			}
		}else{
			$self->msg(($depth > 0 ? 3 : 0), $indent . "no entries found in '$working_dir'");
		}
		return $newest_ts;
	}
}

# main
my $params = syntaxCheck(@ARGV);
my $working_dir = cwd;
my $mod_ts = ModifyTimestamp->new($params);
$mod_ts->walk_dir_change_timestamps();
chdir $working_dir;

__END__

=head1 NAME

mod_ts ("modify timestamp") walks (recursively) through directories and changes the 
timestamp of each directory to the newest contained entry.

=head1 DESCRIPTION

this program lets you change the timestamps of directories depending on their 
contained entries.

for each directory the timestamp will be changed to the newest contained file 
or directory.

=head1 SYNOPSIS

mod_ts start_dir [options]
or
mod_ts [options] start_dir

  start_dir              directory to start with
  -m, --max-depth=x      when searching subdirectories recursively, this param sets 
                          the depth of recursiveness; if not set, this means inf
                          (using --depth makes sense only if --recursive is chosen 
                          other than 0)
  -r, --recursive=x      for searching subdirectories recursively, 
                          x = 0: don't walk into subdirectories (default)
                          x = 1: use subdirectories recursively for getting the 
                                  newest date, but don't change their timestamp
                          x = 2: same as 1, but this _changes_ the timestamps of the
                                  subdirectories
  -d  --use-dirs-only    use directories only (and not files) for getting the 
                          timestamps
  -f, --use-files-only   use files only (and not directories) for getting the 
                          timestamps
  -t, --test             don't change anything, just print possible changes to
                          screen

meta:

  -V, --version          display version and exit.
  -h, --help             display brief help
      --man              display long help (man page)
  -q, --silent           same as --verbose=0
  -v, --verbose          same as --verbose=1 (default)
  -vv,--very-verbose     same as --verbose=2
  -v, --verbose=x        grade of verbosity
                          x=0: no output
                          x=1: default output
                          x=2: much output

some examples:

  mod_ts .
    changes timestamp of current directory to newest file or subdirectory contained.
    does not walk recursively into subdirectories.
  
  mod_ts /home/weihnachtsbert/Music
    changes timestamp of given directory to newest file or subdirectory contained.
    does not walk recursively into subdirectories.

  mod_ts -r 2 /home/weihnachtsbert/Music
    walks recursively into all subdirectories of given directory and their 
    subdirectories a.s.o.
    beginning in the deepest branches this call changes the timestamp of each 
    subdirectory to newest file or subdirectory contained. 
    the algorithm will end in given directory.

=head1 OPTIONS

=over 8

=item B<--max-depth>=I<number>, B<-m> I<number>

when searching subdirectories recursively, this param sets the depth of 
recursiveness; if not set, this means inf

(using --depth makes sense only if B<--recursive> is chosen other than 0)

=item B<--recursive>=I<number>, B<-r> I<number>

type of recursion: I<number> kann be one of the following

0: don't walk into subdirectories (default)

1: use subdirectories recursively for getting the newest date, but don't change 
their timestamp

2: same as 1, but this _changes_ the timestamps of the subdirectories

=item B<--use-dirs-only>, B<-d>

use directories only (and not files) for getting the timestamps

(can't be used together with B<--use-files-only>)

=item B<--use-files-only>, B<-f>

use files only (and not directories) for getting the timestamps

(can't be used together with B<--use-dirs-only>)

=item B<--test>, B<-t>

don't change anything, just print possible changes to screen

=item B<--version>, B<-V>

prints version and exits.

=item B<--help>, B<-h>, B<-?>

prints a brief help message and exits.

=item B<--man>

prints the manual page and exits.

=item B<--verbose>=I<number>, B<-v> I<number>

set grade of verbosity to I<number>. if I<number>==0 then no output
will be given, except hard errors. the higher I<number> is, the more 
output will be printed. default: I<number> = 1.

=item B<--silent, --quiet, -q>

same as B<--verbose=0>.

=item B<--very-verbose, -vv>

same as B<--verbose=2>. you may use B<-vvv> for B<--verbose=3> a.s.o.

=item B<--verbose, -v>

same as B<--verbose=1>.

=back

=head1 LICENCE

copyright (c) 2015, seth
all rights reserved.

redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

this software is provided by the copyright holders and contributors "as is"
and any express or implied warranties, including, but not limited to, the
implied warranties of merchantability and fitness for a particular purpose are
disclaimed. in no event shall the copyright holder or contributors be liable
for any direct, indirect, incidental, special, exemplary, or consequential
damages (including, but not limited to, procurement of substitute goods or
services; loss of use, data, or profits; or business interruption) however
caused and on any theory of liability, whether in contract, strict liability,
or tort (including negligence or otherwise) arising in any way out of the use
of this software, even if advised of the possibility of such damage.

originally written by seth (see https://github.com/wp-seth)

=cut
